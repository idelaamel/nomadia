# Production Configuration
spring.application.name=TouristeProject

# Upload directory (use relative path for cloud deployment)
upload.dir=uploads/

# Database configuration (will be overridden by Railway environment variables)
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/touristproject}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Server configuration
server.port=${PORT:8080}

# Swagger configuration
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true

# Email verification (consider using environment variables for security)
spring.mail.host=${MAIL_HOST:sandbox.smtp.mailtrap.io}
spring.mail.port=${MAIL_PORT:2525}
spring.mail.username=${MAIL_USERNAME:4190cfa9f60d50}
spring.mail.password=${MAIL_PASSWORD:c6d23f9e90755e}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Google OAuth (use environment variables for security)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope=profile, email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI:http://localhost:8080/login/oauth2/code/google}

# Security
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
