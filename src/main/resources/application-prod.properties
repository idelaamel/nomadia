# Production Configuration
spring.application.name=TouristeProject

# Upload directory (use relative path for cloud deployment)
upload.dir=uploads/

# Database configuration (will be overridden by cloud environment variables)
spring.datasource.url=${DATABASE_URL}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration - Simplified for debugging
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Server configuration
server.port=${PORT:8080}
server.address=0.0.0.0

# Swagger configuration
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true

# Email verification (consider using environment variables for security)
spring.mail.host=${MAIL_HOST:sandbox.smtp.mailtrap.io}
spring.mail.port=${MAIL_PORT:2525}
spring.mail.username=${MAIL_USERNAME:4190cfa9f60d50}
spring.mail.password=${MAIL_PASSWORD:c6d23f9e90755e}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Google OAuth (use environment variables for security)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope=profile, email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI:https://web-production-7c5cd.up.railway.app/login/oauth2/code/google}

# Security
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized

# Logging (debug database issues)
logging.level.org.springframework=INFO
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.hibernate=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
